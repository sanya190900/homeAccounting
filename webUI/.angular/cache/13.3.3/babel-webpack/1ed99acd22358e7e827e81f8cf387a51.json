{"ast":null,"code":"import { PeriodService } from '../../services/period/period.service';\nimport { Period } from '../../models/period/period.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport * as Highcharts from 'highcharts';\nimport Histogram from 'highcharts/modules/histogram-bellcurve';\nimport highcharts3D from 'highcharts/highcharts-3d';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/transactions/transactions.service\";\nimport * as i2 from \"../../services/dashboard/dashboard.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/flex-layout/extended\";\nimport * as i11 from \"@angular/material/datepicker\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"highcharts-angular\";\nimport * as i14 from \"../page-not-found/page-not-found.component\";\nconst _c0 = [\"picker\"];\n\nfunction DashboardComponent_div_0_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const period_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", period_r5.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", period_r5.viewValue, \" \");\n  }\n}\n\nfunction DashboardComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 2)(2, \"div\", 3)(3, \"mat-card\")(4, \"mat-form-field\", 4)(5, \"mat-label\");\n    i0.ɵɵtext(6, \"Period\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-select\", 5);\n    i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_div_0_Template_mat_select_ngModelChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.selectedPeriod = $event;\n    })(\"selectionChange\", function DashboardComponent_div_0_Template_mat_select_selectionChange_7_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onPeriodChange();\n    });\n    i0.ɵɵtemplate(8, DashboardComponent_div_0_mat_option_8_Template, 2, 2, \"mat-option\", 6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(9, \"mat-form-field\", 7)(10, \"mat-label\");\n    i0.ɵɵtext(11, \"Enter a date range\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"mat-date-range-input\", 8);\n    i0.ɵɵelement(13, \"input\", 9)(14, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"mat-datepicker-toggle\", 11);\n    i0.ɵɵelementStart(16, \"mat-date-range-picker\", 12, 13)(18, \"mat-date-range-picker-actions\")(19, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_0_Template_button_click_19_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.cancelCustomPeriod();\n    });\n    i0.ɵɵtext(20, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_0_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.createCustomPeriod();\n    });\n    i0.ɵɵtext(22, \"Apply\");\n    i0.ɵɵelementEnd()()()()()();\n    i0.ɵɵelementStart(23, \"div\", 3)(24, \"mat-card\", 16);\n    i0.ɵɵelement(25, \"highcharts-chart\", 17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"div\", 3)(27, \"mat-card\");\n    i0.ɵɵelement(28, \"highcharts-chart\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"mat-card\");\n    i0.ɵɵelement(30, \"highcharts-chart\", 17);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const _r4 = i0.ɵɵreference(17);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedPeriod);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.periods);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.isHidden());\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"rangePicker\", _r4)(\"formGroup\", ctx_r0.range);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"for\", _r4);\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"Highcharts\", ctx_r0.highcharts)(\"options\", ctx_r0.chartOptionsAreaSpline);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"Highcharts\", ctx_r0.highcharts)(\"options\", ctx_r0.chartOptionsPieExpenses);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"Highcharts\", ctx_r0.highcharts)(\"options\", ctx_r0.chartOptionsPieIncome);\n  }\n}\n\nfunction DashboardComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-page-not-found\");\n  }\n}\n\nconst More = require('highcharts/highcharts-more');\n\nMore(Highcharts);\nHistogram(Highcharts);\nhighcharts3D(Highcharts);\n\nconst Exporting = require('highcharts/modules/exporting');\n\nExporting(Highcharts);\n\nconst ExportData = require('highcharts/modules/export-data');\n\nExportData(Highcharts);\n\nconst Accessibility = require('highcharts/modules/accessibility');\n\nAccessibility(Highcharts);\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(transactionsService, dashboardService) {\n      this.transactionsService = transactionsService;\n      this.dashboardService = dashboardService;\n      this.periods = [{\n        value: PeriodService.getCurrentWeek(),\n        viewValue: 'Week'\n      }, {\n        value: PeriodService.getCurrentMonth(),\n        viewValue: 'Month'\n      }, {\n        value: PeriodService.getCurrentYear(),\n        viewValue: 'Year'\n      }, {\n        value: 'all',\n        viewValue: 'All'\n      }, {\n        value: 'custom',\n        viewValue: 'Custom'\n      }];\n      this.selectedPeriod = this.periods[1].value;\n      this.highcharts = Highcharts;\n      this.period = PeriodService.getCurrentMonth();\n      this.range = new FormGroup({\n        start: new FormControl(new Date(PeriodService.getCurrentWeek().start)),\n        end: new FormControl(new Date(PeriodService.getCurrentWeek().stop))\n      });\n      this.data = [];\n    }\n\n    ngOnInit() {\n      const lsw = localStorage.getItem('wallet');\n      this.selectedWallet = lsw !== null ? JSON.parse(lsw) : null;\n      console.log(this.selectedWallet);\n      this.updateData();\n    }\n\n    onPeriodChange() {\n      var _a;\n\n      if (this.selectedPeriod instanceof Period) {\n        this.period = this.selectedPeriod;\n        this.updateData();\n      } else if (this.selectedPeriod === 'custom') {\n        (_a = this.datePicker) === null || _a === void 0 ? void 0 : _a.open();\n      } else {\n        this.getAllData();\n      }\n    }\n\n    getAllData() {\n      this.dashboardService.getFirstTransactionDateByWallet(this.selectedWallet.id).subscribe(datetime => {\n        this.period = PeriodService.createPeriod(new Date(datetime), new Date());\n        this.updateData();\n      }, error => console.log(error));\n    }\n\n    createCustomPeriod() {\n      if (this.range.value.end !== null) {\n        this.period = PeriodService.createPeriod(new Date(this.range.value.start.getTime() - new Date().getTimezoneOffset() * 60 * 1000), new Date(this.range.value.end.getTime() - new Date().getTimezoneOffset() * 60 * 1000));\n        this.updateData();\n      }\n    }\n\n    updateData() {\n      this.dashboardService.getUsageByPeriodAndWallet(this.period, this.selectedWallet.id).subscribe(usage => {\n        console.log(this.period);\n        console.log(usage);\n        usage.forEach(u => {\n          this.data.push([new Date(u.datetime).getTime(), u.value]);\n        });\n        this.chartOptionsAreaSpline = {\n          chart: {\n            type: 'areaspline'\n          },\n          title: {\n            text: 'Usage overview'\n          },\n          xAxis: {\n            type: 'datetime',\n            min: new Date(this.period.start).getTime(),\n            max: new Date(this.period.stop).getTime()\n          },\n          yAxis: {\n            title: {\n              text: this.selectedWallet.currency\n            }\n          },\n          tooltip: {\n            valueSuffix: ' ' + this.selectedWallet.currency,\n            xDateFormat: '%A, %b %e'\n          },\n          legend: {\n            enabled: false\n          },\n          plotOptions: {\n            areaspline: {\n              fillOpacity: 0.5,\n              marker: {\n                enabled: false\n              }\n            }\n          },\n          series: [{\n            name: this.selectedWallet.currency,\n            data: this.data\n          }]\n        };\n      }, error => console.log(error));\n      this.dashboardService.getUsageByPeriodAndWalletGroupByCategoryExpenses(this.period, this.selectedWallet.id).subscribe(usage => {\n        const dataExpenses = [];\n        usage.forEach(u => {\n          dataExpenses.push([u.category.name, u.value]);\n        });\n        this.chartOptionsPieExpenses = {\n          chart: {\n            type: 'pie',\n            options3d: {\n              enabled: true,\n              alpha: 45\n            }\n          },\n          title: {\n            text: 'Expenses overview by categories'\n          },\n          plotOptions: {\n            pie: {\n              innerSize: 100,\n              depth: 45\n            }\n          },\n          series: [{\n            name: this.selectedWallet.currency,\n            data: dataExpenses\n          }]\n        };\n      }, error => console.log(error));\n      this.dashboardService.getUsageByPeriodAndWalletGroupByCategoryIncome(this.period, this.selectedWallet.id).subscribe(usage => {\n        const dataIncome = [];\n        usage.forEach(u => {\n          dataIncome.push([u.category.name, u.value]);\n        });\n        this.chartOptionsPieIncome = {\n          chart: {\n            type: 'pie',\n            options3d: {\n              enabled: true,\n              alpha: 45\n            }\n          },\n          title: {\n            text: 'Income overview by categories'\n          },\n          plotOptions: {\n            pie: {\n              innerSize: 100,\n              depth: 45\n            }\n          },\n          series: [{\n            name: this.selectedWallet.currency,\n            data: dataIncome\n          }]\n        };\n      }, error => console.log(error));\n    }\n\n    isHidden() {\n      if (this.selectedPeriod !== 'custom') {\n        return {\n          width: 0,\n          visibility: 'hidden'\n        };\n      }\n\n      return null;\n    }\n\n    cancelCustomPeriod() {\n      this.selectedPeriod = this.periods[1].value;\n      this.onPeriodChange();\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.TransactionsService), i0.ɵɵdirectiveInject(i2.DashboardService));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    viewQuery: function DashboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datePicker = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"20px\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-around center\"], [\"appearance\", \"outline\", 2, \"margin-left\", \"20px\"], [\"name\", \"period\", 3, \"ngModel\", \"ngModelChange\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"appearance\", \"outline\", 2, \"margin-left\", \"20px\", 3, \"ngStyle\"], [3, \"rangePicker\", \"formGroup\"], [\"matStartDate\", \"\", \"formControlName\", \"start\"], [\"matEndDate\", \"\", \"formControlName\", \"end\"], [\"matSuffix\", \"\", 3, \"for\"], [\"touchUi\", \"\"], [\"picker\", \"\"], [\"mat-button\", \"\", \"matDateRangePickerCancel\", \"\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"matDateRangePickerApply\", \"\", 3, \"click\"], [2, \"width\", \"100%\"], [2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"], [3, \"value\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DashboardComponent_div_0_Template, 31, 12, \"div\", 0);\n        i0.ɵɵtemplate(1, DashboardComponent_ng_template_1_Template, 1, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n\n        i0.ɵɵproperty(\"ngIf\", ctx.data.length > 0)(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [i3.NgIf, i4.DefaultLayoutDirective, i4.DefaultLayoutGapDirective, i4.DefaultLayoutAlignDirective, i5.MatCard, i6.MatFormField, i6.MatLabel, i7.MatSelect, i8.NgControlStatus, i8.NgModel, i3.NgForOf, i9.MatOption, i3.NgStyle, i10.DefaultStyleDirective, i11.MatDateRangeInput, i8.NgControlStatusGroup, i8.FormGroupDirective, i11.MatStartDate, i8.DefaultValueAccessor, i8.FormControlName, i11.MatEndDate, i11.MatDatepickerToggle, i6.MatSuffix, i11.MatDateRangePicker, i11.MatDatepickerActions, i12.MatButton, i11.MatDatepickerCancel, i11.MatDatepickerApply, i13.HighchartsChartComponent, i14.PageNotFoundComponent],\n    styles: [\"\"]\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}