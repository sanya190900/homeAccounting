{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { PeriodService } from '../../services/period/period.service';\nimport { Period } from '../../models/period/period.model';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport * as Highcharts from 'highcharts';\n\nconst More = require('highcharts/highcharts-more');\n\nMore(Highcharts);\nimport Histogram from 'highcharts/modules/histogram-bellcurve';\nHistogram(Highcharts);\nimport highcharts3D from 'highcharts/highcharts-3d';\nhighcharts3D(Highcharts);\n\nconst Exporting = require('highcharts/modules/exporting');\n\nExporting(Highcharts);\n\nconst ExportData = require('highcharts/modules/export-data');\n\nExportData(Highcharts);\n\nconst Accessibility = require('highcharts/modules/accessibility');\n\nAccessibility(Highcharts);\nlet DashboardComponent = class DashboardComponent {\n  constructor(transactionsService, dashboardService) {\n    this.transactionsService = transactionsService;\n    this.dashboardService = dashboardService;\n    this.periods = [{\n      value: PeriodService.getCurrentWeek(),\n      viewValue: 'Week'\n    }, {\n      value: PeriodService.getCurrentMonth(),\n      viewValue: 'Month'\n    }, {\n      value: PeriodService.getCurrentYear(),\n      viewValue: 'Year'\n    }, {\n      value: PeriodService.getToCurrentDate(),\n      viewValue: 'All'\n    }, {\n      value: 'custom',\n      viewValue: 'Custom'\n    }];\n    this.selectedPeriod = this.periods[1].value;\n    this.highcharts = Highcharts;\n    this.period = PeriodService.getCurrentMonth();\n    this.range = new FormGroup({\n      start: new FormControl(new Date(PeriodService.getCurrentWeek().start)),\n      end: new FormControl(new Date(PeriodService.getCurrentWeek().stop))\n    });\n  }\n\n  ngOnInit() {\n    const lsw = localStorage.getItem('wallet');\n    this.selectedWallet = lsw !== null ? JSON.parse(lsw) : null;\n    console.log(this.selectedWallet);\n    this.updateData();\n  }\n\n  onPeriodChange() {\n    var _a;\n\n    if (this.selectedPeriod instanceof Period) {\n      this.period = this.selectedPeriod;\n      this.updateData();\n    } else {\n      (_a = this.datePicker) === null || _a === void 0 ? void 0 : _a.open();\n    }\n  }\n\n  createCustomPeriod() {\n    if (this.range.value.end !== null) {\n      this.period = PeriodService.createPeriod(new Date(this.range.value.start.getTime() - new Date().getTimezoneOffset() * 60 * 1000), new Date(this.range.value.end.getTime() - new Date().getTimezoneOffset() * 60 * 1000));\n      this.updateData();\n    }\n  }\n\n  updateData() {\n    this.dashboardService.getUsageByPeriodAndWallet(this.period, this.selectedWallet.id).subscribe(usage => {\n      const data = [];\n      console.log(usage);\n      usage.forEach(u => {\n        data.push([new Date(u.datetime).getTime(), u.value]);\n      });\n      this.chartOptionsAreaSpline = {\n        chart: {\n          type: 'areaspline'\n        },\n        title: {\n          text: 'Usage overview'\n        },\n        xAxis: {\n          type: 'datetime',\n          max: new Date(this.period.stop).getTime()\n        },\n        yAxis: {\n          title: {\n            text: this.selectedWallet.currency\n          }\n        },\n        tooltip: {\n          valueSuffix: ' ' + this.selectedWallet.currency,\n          xDateFormat: '%A, %b %e'\n        },\n        legend: {\n          enabled: false\n        },\n        plotOptions: {\n          areaspline: {\n            fillOpacity: 0.5,\n            marker: {\n              enabled: false\n            }\n          }\n        },\n        series: [{\n          name: this.selectedWallet.currency,\n          data\n        }]\n      };\n    }, error => console.log(error));\n    this.dashboardService.getUsageByPeriodAndWalletGroupByCategoryExpenses(this.period, this.selectedWallet.id).subscribe(usage => {\n      const dataExpenses = [];\n      usage.forEach(u => {\n        dataExpenses.push([u.category.name, u.value]);\n      });\n      this.chartOptionsPieExpenses = {\n        chart: {\n          type: 'pie',\n          options3d: {\n            enabled: true,\n            alpha: 45\n          }\n        },\n        title: {\n          text: 'Expenses overview by categories'\n        },\n        plotOptions: {\n          pie: {\n            innerSize: 100,\n            depth: 45\n          }\n        },\n        series: [{\n          name: this.selectedWallet.currency,\n          data: dataExpenses\n        }]\n      };\n    }, error => console.log(error));\n    this.dashboardService.getUsageByPeriodAndWalletGroupByCategoryIncome(this.period, this.selectedWallet.id).subscribe(usage => {\n      const dataIncome = [];\n      usage.forEach(u => {\n        dataIncome.push([u.category.name, u.value]);\n      });\n      this.chartOptionsPieIncome = {\n        chart: {\n          type: 'pie',\n          options3d: {\n            enabled: true,\n            alpha: 45\n          }\n        },\n        title: {\n          text: 'Income overview by categories'\n        },\n        plotOptions: {\n          pie: {\n            innerSize: 100,\n            depth: 45\n          }\n        },\n        series: [{\n          name: this.selectedWallet.currency,\n          data: dataIncome\n        }]\n      };\n    }, error => console.log(error));\n  }\n\n  isHidden() {\n    if (this.selectedPeriod !== 'custom') {\n      return {\n        width: 0,\n        visibility: 'hidden'\n      };\n    }\n\n    return null;\n  }\n\n  cancelCustomPeriod() {\n    this.selectedPeriod = this.periods[1].value;\n    this.onPeriodChange();\n  }\n\n};\n\n__decorate([ViewChild('picker')], DashboardComponent.prototype, \"datePicker\", void 0);\n\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}